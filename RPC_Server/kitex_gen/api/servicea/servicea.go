// Code generated by Kitex v0.6.0. DO NOT EDIT.

package servicea

import (
	api "RPC_Server/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceAServiceInfo
}

var serviceAServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "serviceA"
	handlerType := (*api.ServiceA)(nil)
	methods := map[string]kitex.MethodInfo{
		"methodA": kitex.NewMethodInfo(methodAHandler, newServiceAMethodAArgs, newServiceAMethodAResult, false),
		"methodB": kitex.NewMethodInfo(methodBHandler, newServiceAMethodBArgs, newServiceAMethodBResult, false),
		"methodC": kitex.NewMethodInfo(methodCHandler, newServiceAMethodCArgs, newServiceAMethodCResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func methodAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceAMethodAArgs)
	realResult := result.(*api.ServiceAMethodAResult)
	success, err := handler.(api.ServiceA).MethodA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceAMethodAArgs() interface{} {
	return api.NewServiceAMethodAArgs()
}

func newServiceAMethodAResult() interface{} {
	return api.NewServiceAMethodAResult()
}

func methodBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceAMethodBArgs)
	realResult := result.(*api.ServiceAMethodBResult)
	success, err := handler.(api.ServiceA).MethodB(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceAMethodBArgs() interface{} {
	return api.NewServiceAMethodBArgs()
}

func newServiceAMethodBResult() interface{} {
	return api.NewServiceAMethodBResult()
}

func methodCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceAMethodCArgs)
	realResult := result.(*api.ServiceAMethodCResult)
	success, err := handler.(api.ServiceA).MethodC(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceAMethodCArgs() interface{} {
	return api.NewServiceAMethodCArgs()
}

func newServiceAMethodCResult() interface{} {
	return api.NewServiceAMethodCResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MethodA(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceAMethodAArgs
	_args.Req = req
	var _result api.ServiceAMethodAResult
	if err = p.c.Call(ctx, "methodA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MethodB(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceAMethodBArgs
	_args.Req = req
	var _result api.ServiceAMethodBResult
	if err = p.c.Call(ctx, "methodB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MethodC(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceAMethodCArgs
	_args.Req = req
	var _result api.ServiceAMethodCResult
	if err = p.c.Call(ctx, "methodC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
