// Code generated by Kitex v0.6.0. DO NOT EDIT.

package serviceb

import (
	api "RPC_Server/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceBServiceInfo
}

var serviceBServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "serviceB"
	handlerType := (*api.ServiceB)(nil)
	methods := map[string]kitex.MethodInfo{
		"methodA": kitex.NewMethodInfo(methodAHandler, newServiceBMethodAArgs, newServiceBMethodAResult, false),
		"methodB": kitex.NewMethodInfo(methodBHandler, newServiceBMethodBArgs, newServiceBMethodBResult, false),
		"methodC": kitex.NewMethodInfo(methodCHandler, newServiceBMethodCArgs, newServiceBMethodCResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func methodAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceBMethodAArgs)
	realResult := result.(*api.ServiceBMethodAResult)
	success, err := handler.(api.ServiceB).MethodA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceBMethodAArgs() interface{} {
	return api.NewServiceBMethodAArgs()
}

func newServiceBMethodAResult() interface{} {
	return api.NewServiceBMethodAResult()
}

func methodBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceBMethodBArgs)
	realResult := result.(*api.ServiceBMethodBResult)
	success, err := handler.(api.ServiceB).MethodB(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceBMethodBArgs() interface{} {
	return api.NewServiceBMethodBArgs()
}

func newServiceBMethodBResult() interface{} {
	return api.NewServiceBMethodBResult()
}

func methodCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceBMethodCArgs)
	realResult := result.(*api.ServiceBMethodCResult)
	success, err := handler.(api.ServiceB).MethodC(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceBMethodCArgs() interface{} {
	return api.NewServiceBMethodCArgs()
}

func newServiceBMethodCResult() interface{} {
	return api.NewServiceBMethodCResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MethodA(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceBMethodAArgs
	_args.Req = req
	var _result api.ServiceBMethodAResult
	if err = p.c.Call(ctx, "methodA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MethodB(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceBMethodBArgs
	_args.Req = req
	var _result api.ServiceBMethodBResult
	if err = p.c.Call(ctx, "methodB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MethodC(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceBMethodCArgs
	_args.Req = req
	var _result api.ServiceBMethodCResult
	if err = p.c.Call(ctx, "methodC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
